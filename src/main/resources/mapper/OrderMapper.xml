<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sk.mall.dao.OrderMapper">
    <resultMap id="BaseResultMap" type="com.sk.mall.entity.Order">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="userId" jdbcType="INTEGER" property="userId"/>
        <result column="orderTime" jdbcType="TIMESTAMP" property="orderTime"/>
        <result column="oldPrice" jdbcType="REAL" property="oldPrice"/>
        <result column="newPrice" jdbcType="REAL" property="newPrice"/>
        <result column="isPay" jdbcType="BIT" property="isPay"/>
        <result column="isSend" jdbcType="BIT" property="isSend"/>
        <result column="isReceive" jdbcType="BIT" property="isReceive"/>
        <result column="isComplete" jdbcType="BIT" property="isComplete"/>
        <result column="addressId" jdbcType="INTEGER" property="addressId"/>
    </resultMap>

    <resultMap id="orderResult" extends="BaseResultMap" type="com.sk.mall.entity.Order">
        <collection property="orderItems" javaType="ArrayList" ofType="com.sk.mall.entity.OrderItem"
                    select="com.sk.mall.dao.OrderItemMapper.getOrderItemByOrderId" column="id"/>
    </resultMap>

    <resultMap id="orderIncludeAddress" extends="orderResult" type="com.sk.mall.entity.Order">
        <association property="address" javaType="com.sk.mall.entity.Address">
            <id column="id" jdbcType="INTEGER" property="id"/>
            <result column="userId" jdbcType="INTEGER" property="userId"/>
            <result column="province" jdbcType="VARCHAR" property="province"/>
            <result column="city" jdbcType="VARCHAR" property="city"/>
            <result column="county" jdbcType="VARCHAR" property="county"/>
            <result column="detailAddr" jdbcType="VARCHAR" property="detailAddress"/>
            <result column="conName" jdbcType="VARCHAR" property="conName"/>
            <result column="conTel" jdbcType="VARCHAR" property="contel"/>
        </association>
    </resultMap>

    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, userId, orderTime, oldPrice, newPrice, isPay, isSend, isReceive, isComplete,
    addressId
    </sql>

    <select id="getAllOrderByUserId" resultMap="orderResult">
        select o.*
        from indent o,
             address a
        where o.addressId = a.id
          and o.userId = #{userId}
    </select>

    <select id="getAllByState" resultMap="orderIncludeAddress">
        select o.* ,a.*from indent o , address a where o.addressId = a.id
        <if test="isSend !=null and !isSend">
            and isSend = 0
        </if>
        <if test="isSend !=null and isReceive != null and !isReceive">
            and isSend = 1 and isReceive = 0
        </if>
        <if test="isComplete !=null and isComplete">
            and isComplete = 1
        </if>
    </select>
    <select id="selectByExample" parameterType="com.sk.mall.entity.Order" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from indent
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="getById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from indent
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteById" parameterType="java.lang.Integer">
        delete
        from indent
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.sk.mall.entity.Order">
        delete from indent
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.sk.mall.entity.Order">
        insert into indent (id, userId, orderTime,
                            oldPrice, newPrice, isPay, isSend,
                            isReceive, isComplete, addressId)
        values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{orderTime,jdbcType=TIMESTAMP},
                #{oldPrice,jdbcType=REAL}, #{newPrice,jdbcType=REAL}, #{isPay,jdbcType=BIT}, #{issend,jdbcType=BIT},
                #{isReceive,jdbcType=BIT}, #{isComplete,jdbcType=BIT}, #{addressId,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" parameterType="com.sk.mall.entity.Order" useGeneratedKeys="true" keyProperty="orderid">
        insert into indent
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                userId,
            </if>
            <if test="orderTime != null">
                orderTime,
            </if>
            <if test="oldPrice != null">
                oldPrice,
            </if>
            <if test="newPrice != null">
                newPrice,
            </if>
            <if test="isPay != null">
                isPay,
            </if>
            <if test="isSend != null">
                isSend,
            </if>
            <if test="isReceive != null">
                isReceive,
            </if>
            <if test="isComplete != null">
                isComplete,
            </if>
            <if test="addressId != null">
                addressId,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="orderTime != null">
                #{orderTime,jdbcType=TIMESTAMP},
            </if>
            <if test="oldPrice != null">
                #{oldPrice,jdbcType=REAL},
            </if>
            <if test="newPrice != null">
                #{newPrice,jdbcType=REAL},
            </if>
            <if test="isPay != null">
                #{isPay,jdbcType=BIT},
            </if>
            <if test="isSend != null">
                #{isSend,jdbcType=BIT},
            </if>
            <if test="isReceive != null">
                #{isReceive,jdbcType=BIT},
            </if>
            <if test="isComplete != null">
                #{isComplete,jdbcType=BIT},
            </if>
            <if test="addressId != null">
                #{addressId,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.sk.mall.entity.Order" resultType="java.lang.Long">
        select count(*) from indent
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update indent
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.userId != null">
                userId = #{record.userId,jdbcType=INTEGER},
            </if>
            <if test="record.orderTime != null">
                orderTime = #{record.orderTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.oldPrice != null">
                oldPrice = #{record.oldPrice,jdbcType=REAL},
            </if>
            <if test="record.newPrice != null">
                newPrice = #{record.newPrice,jdbcType=REAL},
            </if>
            <if test="record.isPay != null">
                isPay = #{record.isPay,jdbcType=BIT},
            </if>
            <if test="record.isSend != null">
                isSend = #{record.isSend,jdbcType=BIT},
            </if>
            <if test="record.isReceive != null">
                isReceive = #{record.isReceive,jdbcType=BIT},
            </if>
            <if test="record.isComplete != null">
                isComplete = #{record.isComplete,jdbcType=BIT},
            </if>
            <if test="record.addressId != null">
                addressId = #{record.addressId,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update indent
        set id = #{record.id,jdbcType=INTEGER},
        userId = #{record.userId,jdbcType=INTEGER},
        orderTime = #{record.orderTime,jdbcType=TIMESTAMP},
        oldPrice = #{record.oldPrice,jdbcType=REAL},
        newPrice = #{record.newPrice,jdbcType=REAL},
        isPay = #{record.isPay,jdbcType=BIT},
        isSend = #{record.isSend,jdbcType=BIT},
        isReceive = #{record.isReceive,jdbcType=BIT},
        isComplete = #{record.isComplete,jdbcType=BIT},
        addressId = #{record.addressId,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.sk.mall.entity.Order">
        update indent
        <set>
            <if test="userId != null">
                userId = #{userId,jdbcType=INTEGER},
            </if>
            <if test="orderTime != null">
                orderTime = #{orderTime,jdbcType=TIMESTAMP},
            </if>
            <if test="oldPrice != null">
                oldPrice = #{oldPrice,jdbcType=REAL},
            </if>
            <if test="newPrice != null">
                newPrice = #{newPrice,jdbcType=REAL},
            </if>
            <if test="isPay != null">
                isPay = #{isPay,jdbcType=BIT},
            </if>
            <if test="isSend != null">
                isSend = #{isSend,jdbcType=BIT},
            </if>
            <if test="isReceive != null">
                isReceive = #{isReceive,jdbcType=BIT},
            </if>
            <if test="isComplete != null">
                isComplete = #{isComplete,jdbcType=BIT},
            </if>
            <if test="addressId != null">
                addressId = #{addressId,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.sk.mall.entity.Order">
        update indent
        set userId     = #{userId,jdbcType=INTEGER},
            orderTime  = #{orderTime,jdbcType=TIMESTAMP},
            oldPrice   = #{oldPrice,jdbcType=REAL},
            newPrice   = #{newPrice,jdbcType=REAL},
            isPay      = #{isPay,jdbcType=BIT},
            isSend     = #{isSend,jdbcType=BIT},
            isReceive  = #{isReceive,jdbcType=BIT},
            isComplete = #{isComplete,jdbcType=BIT},
            addressId  = #{addressId,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>